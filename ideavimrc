" Configuration for IdeaVim - https://github.com/JetBrains/ideavim/wiki/
"
" ============================================================================
"    GENERAL
" ============================================================================
"

set number                   " show line numbers
set relativenumber           " show relative to current line
set showmode                 " show mode on status line

set scrolloff=10             " set 10 lines to the edge of screen
set sidescrolloff=5          " and 5 to the side

set incsearch                " incremental search
set hlsearch                 " highlight all matches
set ignorecase               " ignore case on search
set smartcase                " case sensitive if one letter is upper case

" Plugins - https://github.com/JetBrains/ideavim/wiki/Emulated-plugins
set surround                 " emulates vim-surround plugin
set commentary               " emulates commentary.vim plugin
set sneak                    " emulates vim-sneak
set vim-paragraph-motion     " treat whitespace-only lines as blank for { }
set textobj-entire           " ae = whole file, ie = minus surrounding whitespace
set highlightedyank          " highlight yanks
set NERDTree                 " emulates NERDTree for project window

set ideamarks                " Global VIM marks set IDEA bookmarks
set ideajoin                 " Let IDEA join lines (collapses concatenation and nested if's, etc)
set idearefactormode=keep    " Keep VIM mode when entering refactor prompts
set ideavimsupport=dialog    " Use VIM in IDEA dialogs
set showmode

" Map Tab to Nop until command mode bug is fixed.
cnoremap <Tab> <Nop>

" Pairs of characters that "%" can match
set matchpairs=(:),[:],{:},<:>

" Default leader is \, but space is better
nnoremap <SPACE> <Nop>
let mapleader=' '

" un-highlight searches
nnoremap <Leader><space> :nohlsearch<cr>

" yank to end of line
nnoremap Y y$

" splits
nnoremap <Leader>ws :split<cr>
nnoremap <Leader>wv :vsplit<cr>
" keep IDE <C-w> functionality in visual - select outer block
sethandler <C-w> n:vim v:ide


"
" ============================================================================
"     NAVIGATION
" ============================================================================
"

" open NERDTree
nnoremap <Leader>x :NERDTreeToggle<cr>

" quick to start/end of line
nnoremap H ^
nnoremap L $

" sub-menu navigation
sethandler <C-k> a:ide
sethandler <C-j> a:ide
" below Up mapping is broken for some reason  - configure these manually in IDE "
noremap <C-K> :action Up<CR>
noremap <C-J> :action Down<CR>

" navigate tabs with Alt-H/L
nnoremap <A-H> :action PreviousTab<CR>
nnoremap <A-L> :action NextTab<CR>

" code navigation
nnoremap <leader>gd :action GotoDeclaration<CR>
nnoremap <leader>gi :action GotoImplementation<CR>
nnoremap <leader>gu :action FindUsages<CR>
nnoremap <leader>gt :action GotoTest<CR>
nnoremap <Leader>h :action CallHierarchy<CR>
nnoremap <Leader>s :action SearchEverywhere<CR>
nnoremap <C-n> :action GotoClass<CR>
nnoremap gj :action VcsShowNextChangeMarker<CR>
nnoremap gk :action VcsShowPrevChangeMarker<CR>

nnoremap g; :action JumpToLastChange<CR>
nnoremap g, :action JumpToNextChange<CR>

nnoremap ge :action GotoNextError<CR>
nnoremap gE :action GotoPreviousError<CR>

sethandler <C-e> a:vim
sethandler <C-f> a:vim
nnoremap <C-e> :action RecentFiles<CR>
nnoremap <C-f> :action FileStructurePopup<CR>
nnoremap <leader>w :action Vcs.ShowTabbedFileHistory<CR>

" Jump between methods
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>

"
" ============================================================================
"    EDITING
" ============================================================================
"


" easier exit insert mode
inoremap jk <Esc>

" Great pasting functionality
set clipboard=unnamed,unnamedplus,ideaput
nnoremap <leader>p :action PasteMultiple<CR>

" Copy/Paste works as usual
sethandler <C-c> a:ide
sethandler <C-v> a:ide

" keep visual mode selection after indenting
vnoremap < <gv
vnoremap > >gv

sethandler <C-p> a:vim
sethandler <C-q> a:vim
noremap <C-p> :action ParameterInfo<CR>
noremap <C-q> :action QuickJavaDoc<CR>

nnoremap <leader>n :action NewFile<CR>
nnoremap <leader>k :action Kotlin.NewFile<CR>
nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>q :action CloseContent<CR>



"
" ============================================================================
"    EXTRAS
" ============================================================================
"

" open terminal in project root
sethandler <c-t> a:vim
nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
" open terminal in current file location
nnoremap <leader>t :action Terminal.OpenInTerminal<CR>


" Distraction Free Mode
sethandler <c-z> a:vim
nnoremap <c-z> :action ToggleDistractionFreeMode<CR>

sethandler <c-x> a:vim
nnoremap <c-x> :action HideAllWindows<CR>


""" Java Method text-object Emulation"{{{
""" https://youtrack.jetbrains.com/issue/VIM-480/Add-text-objects-for-code-constructs-like-a-method-and-a-class
"""     -> ripped from https://gist.github.com/SethMilliken/7cf8d9322de6f626d1d29add8b45d5b6#file-v-L185

" text-objects emulation
nmap vad <action>($SelectAll)
nmap vmm :call SelectMethod()<CR>
nmap vim :call SelectMethodInner()<CR>
nmap vam :call SelectMethodFull()<CR>
nmap dim :call DeleteMethodInner()<CR>
nmap dam :call DeleteMethodFull()<CR>
nmap yim :call SelectMethodInner()<CR>y
nmap yam :call SelectMethodFull()<CR>y
nmap dom :call AltSelectMethod()<CR>

function! SelectMethodBase(post)
    normal }
    action MethodUp
    exe "normal " . "_Vg_%" . a:post
endfunction

" Center Method
function! SelectMethod(post="")
    let l:base = "o" . "zz" . a:post
    call SelectMethodBase(l:base)
endfunction

" Select contents of method
function! SelectMethodInner(post="")
    let l:base = "j" . "o" . "k" . "o" . a:post
    call SelectMethod(l:base)
endfunction

" Select full method, including preceding whitespace
function! SelectMethodFull(post="")
    let l:base = "{" . a:post
    call SelectMethod(l:base)
endfunction

function! DeleteMethodInner()
    call SelectMethodInner("d")
endfunction

function! DeleteMethodFull()
    call SelectMethodFull("d")
endfunction

function! AltSelectMethod()
    normal }
    action MethodUp
    let lines = {'first': 0, 'last': 0, 'first_nb': 0}
    let lines['first'] = line(".")
    normal k
    exe "/{"
    normal _f{%
    let lines['last'] = line(".")
    exe "normal " . lines['first'] . "G"
    exe "?^$"
    let lines['first_ext'] = line(".") + 1
    let lines['last_ext'] = lines['last'] + 1
    " echo lines['first'] . "," . lines['last']
    "exe "normal " . lines['first'] . "G" . "V" . lines['last'] . "G"
    exe "normal " . lines['first_ext'] . "G" . "V" . lines['last_ext'] . "G" . "o"
endfunction
